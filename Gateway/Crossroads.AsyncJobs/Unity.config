<!--Documentation: http://msdn.microsoft.com/en-us/library/ff660914%28v=pandp.20%29.aspx -->
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <assembly name="crds-angular" />
  <assembly name="Crossroads.AsyncJobs" />
  <assembly name="Crossroads.Utilities" />
  <assembly name="MinistryPlatform.Translation" />
  <assembly name="RestSharp" />

  <container>
    <!-- Main Job Processor - add to the "processors" array below as new job processors are added -->
    <register type="Crossroads.AsyncJobs.Application.JobProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="processors">
          <array>
            <dependency name="stripeEventQueueProcessor"/>
          </array>
        </param>
      </constructor>
    </register>
    
    <!-- Message Queue Factory -->
    <register name="messageQueueFactory" type="Crossroads.Utilities.Messaging.Interfaces.IMessageQueueFactory" mapTo="Crossroads.Utilities.Messaging.MessageQueueFactory"/>

    <!-- Stripe Event queue processor -->
    <register name="stripeEventQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="stripeEventQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="stripeEventQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\StripeEvents" />
      <property name="JobExecutor">
        <dependency name="stripeEventProcessor" />
      </property>
    </register>
    <register name="stripeEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]" mapTo="Crossroads.AsyncJobs.Processors.StripeEventProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="stripeEventService">
          <dependency name="stripeEventService" />
        </param>
      </constructor>
    </register>
    <register name="stripeEventService" type="crds_angular.Services.Interfaces.IStripeEventService" mapTo="crds_angular.Services.StripeEventService">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="paymentService">
          <dependency name="paymentService"/>
        </param>
        <param name="donationService">
          <dependency name="donationService"/>
        </param> 
        <param name="configuration">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
      </constructor>
    </register>
    
    <!-- Configuration Wrapper -->
    <register type="Crossroads.Utilities.Interfaces.IConfigurationWrapper" mapTo="Crossroads.Utilities.Services.ConfigurationWrapper" />
    
    <!-- Content Block Service (for CMS messages) -->
    <register type="Crossroads.Utilities.Interfaces.IContentBlockService"
              mapTo="Crossroads.Utilities.Services.ContentBlockService">
      <lifetime type="ContainerControlledLifetimeManager"/>
      <constructor>
        <param name="cmsRestClient">
          <dependency name="cmsRestClient"/>
        </param>
      </constructor>
    </register>
    <register name="cmsRestClient" type="RestSharp.IRestClient" mapTo="RestSharp.RestClient">
      <constructor>
        <param name="baseUrl" type="string">
          <value value="CRDS_CMS_ENDPOINT" typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
      </constructor>
    </register>

    <register name="paymentService" type="crds_angular.Services.Interfaces.IPaymentService" mapTo="crds_angular.Services.StripeService">
      <constructor>
        <param name="stripeRestClient">
          <dependency name="stripeRestClient" />
        </param>
        <param name="configuration">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
        <param name="contentBlockService">
          <dependency type="Crossroads.Utilities.Interfaces.IContentBlockService"/>
        </param>
      </constructor>
    </register>

    <register name="donationService" type="crds_angular.Services.Interfaces.IDonationService" mapTo="crds_angular.Services.DonationService" />

    <register name="stripeRestClient" type="RestSharp.IRestClient" mapTo="RestSharp.RestClient">
      <constructor>
        <param name="baseUrl" type="string">
          <value value="PaymentClient" typeConverter="Crossroads.Utilities.Services.AppSettingsTypeConverter" />
        </param>
      </constructor>
      <property name="Authenticator">
        <dependency name="stripeAuthenticator" />
      </property>
    </register>
    <register name="stripeAuthenticator" type="RestSharp.IAuthenticator" mapTo="RestSharp.HttpBasicAuthenticator">
      <constructor>
        <param name="username">
          <value value="STRIPE_AUTH_TOKEN"
                 typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
        <!-- TODO I really need to set this to null, but Unity doesn't like that, so sending spaces for now -->
        <param name="password" value="  " />
      </constructor>
    </register>

    <register type="MinistryPlatform.Translation.Services.Interfaces.IDonationService" mapTo="MinistryPlatform.Translation.Services.DonationService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IDonorService" mapTo="MinistryPlatform.Translation.Services.DonorService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IProgramService" mapTo="MinistryPlatform.Translation.Services.ProgramService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.ICommunicationService" mapTo="MinistryPlatform.Translation.Services.CommunicationService" />

    <register type="MinistryPlatform.Translation.Services.Interfaces.IMinistryPlatformService" mapTo="MinistryPlatform.Translation.Services.MinistryPlatformServiceImpl"/>

    <!-- Register a per-resolve MP PlatformServiceClient -->
    <register type="MinistryPlatform.Translation.PlatformService.PlatformServiceClient">
      <lifetime type="PerResolveLifetimeManager" />
      <constructor></constructor>
    </register>
  </container>
</unity>
